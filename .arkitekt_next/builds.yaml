builds:
- build_id: cbab8cf9-9006-4d6e-b9df-d78a0a36dfa0
  build_run: d99fc2ec-a0e8-4a0d-b9fc-2a5fc8516037
  description: This is a vanilla flavour
  flavour: vanilla
  inspection:
    requirements:
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: lok
      optional: false
      service: live.arkitekt.lok
    - description: An instance of ArkitektNext fluss to retrieve graphs from
      key: fluss
      optional: false
      service: live.arkitekt.fluss
    - description: An instance of ArkitektNext Kabinet to retrieve nodes from
      key: kabinet
      optional: false
      service: live.arkitekt.kabinet
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: livekit
      optional: false
      service: io.livekit.livekit
    - description: An instance of ArkitektNext Mikro to make requests to the user's
        data
      key: mikro
      optional: true
      service: live.arkitekt.mikro
    - description: An instance of ArkitektNext Datalayer to make requests to the user's
        data
      key: datalayer
      optional: true
      service: live.arkitekt.s3
    - description: An instance of ArkitektNext Rekuest to assign to nodes
      key: rekuest
      optional: false
      service: live.arkitekt.rekuest
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: unlok
      optional: false
      service: live.arkitekt.lok
    size: 544700926
    templates:
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: dump_logs
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: dump_logs
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchDeployments($search: String, $values: [ID!]) {\n \
              \ options: deployments(\n    filters: {search: $search, ids: $values}\n\
              \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
              \  }\n}"
            ward: kabinet
          identifier: '@kabinet/deployment'
          key: deployment
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Runner
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: run
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Restart
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: restart
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Move
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: move
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Stop
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: stop
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Removedd
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: remove
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchReleases($search: String, $values: [ID!]) {\n  options:\
              \ releases(\n    filters: {search: $search, ids: $values}\n    pagination:\
              \ {limit: 10}\n  ) {\n    value: id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/release'
          key: release
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Deploy
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: deploy
  manifest:
    author: jhnnsrs
    entrypoint: app
    identifier: deployer
    scopes:
    - read
    version: 0.0.3
  selectors: []
- build_id: 83ad70d5-a3f7-4626-a2ba-0f1115841948
  build_run: 64a86b3e-64ae-4c9f-96de-695144e4c2d4
  description: This is a vanilla flavour
  flavour: vanilla
  inspection:
    requirements:
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: lok
      optional: false
      service: live.arkitekt.lok
    - description: An instance of ArkitektNext fluss to retrieve graphs from
      key: fluss
      optional: false
      service: live.arkitekt.fluss
    - description: An instance of ArkitektNext Kabinet to retrieve nodes from
      key: kabinet
      optional: false
      service: live.arkitekt.kabinet
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: livekit
      optional: false
      service: io.livekit.livekit
    - description: An instance of ArkitektNext Mikro to make requests to the user's
        data
      key: mikro
      optional: true
      service: live.arkitekt.mikro
    - description: An instance of ArkitektNext Datalayer to make requests to the user's
        data
      key: datalayer
      optional: true
      service: live.arkitekt.s3
    - description: An instance of ArkitektNext Rekuest to assign to nodes
      key: rekuest
      optional: false
      service: live.arkitekt.rekuest
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: unlok
      optional: false
      service: live.arkitekt.lok
    size: 544714704
    templates:
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod to refresh the logs for
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          label: pod
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Refresh Logs
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: refresh_logs
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Restart
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: restart
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Stop
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: stop
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Remove
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: remove
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchFlavours($search: String, $values: [ID!]) {\n  options:\
              \ flavours(\n    filters: {search: $search, ids: $values}\n    pagination:\
              \ {limit: 10}\n  ) {\n    value: id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/flavour'
          key: flavour
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Deploy Flavour
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod that was deployed
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: deploy_flavour
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchReleases($search: String, $values: [ID!]) {\n  options:\
              \ releases(\n    filters: {search: $search, ids: $values}\n    pagination:\
              \ {limit: 10}\n  ) {\n    value: id\n    label: name\n  }\n}"
            ward: kabinet
          description: The release to deploy
          identifier: '@kabinet/release'
          key: release
          kind: STRUCTURE
          label: release
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Deploy
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod that was deployed
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: deploy
  manifest:
    author: jhnnsrs
    entrypoint: app
    identifier: deployer
    scopes:
    - read
    version: 0.0.3
  selectors: []
- build_id: 695384c1-cea8-4c8e-86c6-10c849823a18
  build_run: 034f4672-fa1b-49d3-b7b3-ac9554978265
  description: This is a vanilla flavour
  flavour: vanilla
  inspection:
    requirements:
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: lok
      optional: false
      service: live.arkitekt.lok
    - description: An instance of ArkitektNext fluss to retrieve graphs from
      key: fluss
      optional: false
      service: live.arkitekt.fluss
    - description: An instance of ArkitektNext Kabinet to retrieve nodes from
      key: kabinet
      optional: false
      service: live.arkitekt.kabinet
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: livekit
      optional: false
      service: io.livekit.livekit
    - description: An instance of ArkitektNext Mikro to make requests to the user's
        data
      key: mikro
      optional: true
      service: live.arkitekt.mikro
    - description: An instance of ArkitektNext Datalayer to make requests to the user's
        data
      key: datalayer
      optional: true
      service: live.arkitekt.s3
    - description: An instance of ArkitektNext Rekuest to assign to nodes
      key: rekuest
      optional: false
      service: live.arkitekt.rekuest
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: unlok
      optional: false
      service: live.arkitekt.lok
    size: 544730046
    templates:
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod to refresh the logs for
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          label: pod
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Refresh Logs
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: refresh_logs
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Restart
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: restart
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Stop
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: stop
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Remove
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: remove
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchFlavours($search: String, $values: [ID!]) {\n  options:\
              \ flavours(\n    filters: {search: $search, ids: $values}\n    pagination:\
              \ {limit: 10}\n  ) {\n    value: id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/flavour'
          key: flavour
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Deploy Flavour
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod that was deployed
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: deploy_flavour
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchReleases($search: String, $values: [ID!]) {\n  options:\
              \ releases(\n    filters: {search: $search, ids: $values}\n    pagination:\
              \ {limit: 10}\n  ) {\n    value: id\n    label: name\n  }\n}"
            ward: kabinet
          description: The release to deploy
          identifier: '@kabinet/release'
          key: release
          kind: STRUCTURE
          label: release
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Deploy
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod that was deployed
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: deploy
  manifest:
    author: jhnnsrs
    entrypoint: app
    identifier: deployer
    scopes:
    - read
    version: 0.0.4
  selectors: []
- build_id: 63300f57-a2b2-4e0a-b725-54371f3b89b9
  build_run: 3b76dc52-64e1-4762-b2b8-a32411373540
  description: This is a vanilla flavour
  flavour: vanilla
  inspection:
    requirements:
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: lok
      optional: false
      service: live.arkitekt.lok
    - description: An instance of ArkitektNext fluss to retrieve graphs from
      key: fluss
      optional: false
      service: live.arkitekt.fluss
    - description: An instance of ArkitektNext Kabinet to retrieve nodes from
      key: kabinet
      optional: false
      service: live.arkitekt.kabinet
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: livekit
      optional: false
      service: io.livekit.livekit
    - description: An instance of ArkitektNext Mikro to make requests to the user's
        data
      key: mikro
      optional: true
      service: live.arkitekt.mikro
    - description: An instance of ArkitektNext Datalayer to make requests to the user's
        data
      key: datalayer
      optional: true
      service: live.arkitekt.s3
    - description: An instance of ArkitektNext Rekuest to assign to nodes
      key: rekuest
      optional: false
      service: live.arkitekt.rekuest
    - description: An instance of ArkitektNext Lok to authenticate the user
      key: unlok
      optional: false
      service: live.arkitekt.lok
    size: 544788384
    templates:
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod to refresh the logs for
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          label: pod
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Refresh Logs
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: refresh_logs
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Restart
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: restart
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Stop
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: stop
    - definition:
        args:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: pod
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Remove
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: remove
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchFlavours($search: String, $values: [ID!]) {\n  options:\
              \ flavours(\n    filters: {search: $search, ids: $values}\n    pagination:\
              \ {limit: 10}\n  ) {\n    value: id\n    label: name\n  }\n}"
            ward: kabinet
          identifier: '@kabinet/flavour'
          key: flavour
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Deploy Flavour
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod that was deployed
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: deploy_flavour
    - definition:
        args:
        - assignWidget:
            kind: SEARCH
            query: "query SearchReleases($search: String, $values: [ID!]) {\n  options:\
              \ releases(\n    filters: {search: $search, ids: $values}\n    pagination:\
              \ {limit: 10}\n  ) {\n    value: id\n    label: name\n  }\n}"
            ward: kabinet
          description: The release to deploy
          identifier: '@kabinet/release'
          key: release
          kind: STRUCTURE
          label: release
          nullable: false
          scope: GLOBAL
        collections: []
        interfaces: []
        isDev: false
        isTestFor: []
        kind: FUNCTION
        name: Deploy
        portGroups: []
        returns:
        - assignWidget:
            filters:
            - assignWidget:
                kind: SEARCH
                query: "query SearchDeployments($search: String, $values: [ID!]) {\n\
                  \  options: deployments(\n    filters: {search: $search, ids: $values}\n\
                  \    pagination: {limit: 10}\n  ) {\n    value: id\n    label: name\n\
                  \  }\n}"
                ward: kabinet
              identifier: '@kabinet/deployment'
              key: deployment
              kind: STRUCTURE
              nullable: true
              scope: GLOBAL
            kind: SEARCH
            query: "query SearchPods($search: String, $values: [ID!], $backend: ID)\
              \ {\n  options: pods(\n    filters: {search: $search, ids: $values,\
              \ backend: $backend}\n    pagination: {limit: 10}\n  ) {\n    value:\
              \ id\n    label: name\n  }\n}"
            ward: kabinet
          description: The pod that was deployed
          identifier: '@kabinet/pod'
          key: return0
          kind: STRUCTURE
          nullable: false
          scope: GLOBAL
        stateful: false
      dependencies: []
      dynamic: false
      interface: deploy
  manifest:
    author: jhnnsrs
    entrypoint: app
    identifier: deployer
    scopes:
    - read
    version: 0.0.5
  selectors: []
latest_build_run: 3b76dc52-64e1-4762-b2b8-a32411373540
